#+author: Kelvin Salton do Prado

* Emacs Configuration

My personal emacs configuration using org-babel.

Based on [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from Scratch]].

** Startup

Settings related to emacs startup.

*** Disable Startup Message

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

*** Startup Performance

Function to print out the duration of emacs startup using the emacs-startup-hook:

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                (float-time
                (time-subtract after-init-time before-init-time)))
        gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Package System Setup

Set package archives and initialize package.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Automatic Package Updates

The =auto-package-update= package helps us keep our Emacs packages up to date! It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** Basic Settings

Some basic emacs settings.

*** UI Settings

Settings related to user interface.

#+begin_src emacs-lisp
;; Disable tooltip and bars
(tooltip-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; Set up visible bell
(setq visible-bell t)

;; Open window maximized
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq fill-column 80)
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

*** Line Numbers

Display line numbers for specific modes.

#+begin_src emacs-lisp
;; Display line numbers
(global-display-line-numbers-mode t)
(column-number-mode)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
              term-mode-hook
              shell-mode-hook
              treemacs-mode-hook
              eshell-mode-hook
              treemacs-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Font

#+begin_src emacs-lisp
(defvar efs/default-font-size 120)

(set-face-attribute 'default nil :height efs/default-font-size)

;; Check if font exists
(defun my/font-exists (font) (if (null (x-list-fonts font)) nil t))

;; Set frame font if available
(when (window-system)
  (cond ((my/font-exists "Fira Code Retina") (set-frame-font "Fira Code Retina:spacing=100:size=16" nil t))))

;; Allows zoom in and out
(defun my/zoom (operator)
    (interactive)
    (set-face-attribute 'default nil
                        :height
                        (funcall operator (face-attribute 'default :height) 10)))

(global-set-key (kbd "C->") (lambda () (interactive) (my/zoom '+)))
(global-set-key (kbd "C-<") (lambda () (interactive) (my/zoom '-)))
#+end_src

*** Fix Indentation

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+end_src

*** Global Keys

#+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Org Mode

Make sure org mode is updated and add some customization:

#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Links:
- https://orgmode.org
- https://github.com/sabof/org-bullets
- https://github.com/joostkremers/visual-fill-column

** Theme

#+begin_src emacs-lisp
(use-package dracula-theme
  :init (load-theme 'dracula t))
#+end_src

Links:
- https://draculatheme.com

** Modeline

#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 24)))
#+end_src

Links:
- https://github.com/seagle0128/doom-modeline

** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  ;;(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;;(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

Links:
- https://github.com/emacs-evil/evil

** Completion

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivt-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src

** Tree

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)
#+end_src

** Helpers

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Links:
- https://github.com/justbur/emacs-which-key
- https://github.com/Fanael/rainbow-delimiters

** Programming

Settings and packages related to programming.

*** Remove Trailing Whitespaces

Automatically remove trailing whitespaces when saving a file in =prog-mode=.

#+begin_src emacs-lisp
(defun my/remove-trailing-whitespace ()
  (when (derived-mode-p 'prog-mode)
    (delete-trailing-whitespace)))

(add-hook 'before-save-hook 'my/remove-trailing-whitespace)
#+end_src

*** Syntax Checking

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

Links:
- https://github.com/flycheck/flycheck

*** Language Server Protocol

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

*** Python

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+end_src

Links:
- https://github.com/jorgenschaefer/elpy

*** Scala

#+begin_src emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package cider
  :ensure t)
#+end_src

** Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
